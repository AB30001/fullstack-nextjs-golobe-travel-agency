#!/usr/bin/env node

/**
 * Golobe Travel Agency - Setup Script
 *
 * This script helps you set up the environment variables for the project.
 * Run this script after cloning the repository to configure your local environment.
 */

const fs = require("fs");
const path = require("path");
const crypto = require("crypto");

console.log("üöÄ Welcome to Golobe Travel Agency Setup!");
console.log(
  "This script will help you configure your environment variables.\n",
);

// Function to generate random strings
function generateRandomString(length = 32) {
  return crypto.randomBytes(length).toString("hex");
}

// Function to prompt user for input
function prompt(question) {
  const readline = require("readline");
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer);
    });
  });
}

// Function to create environment file
async function createEnvFile() {
  const envPath = path.join(process.cwd(), ".env.local");

  // Check if .env.local already exists
  if (fs.existsSync(envPath)) {
    const overwrite = await prompt(
      "‚ö†Ô∏è  .env.local already exists. Do you want to overwrite it? (y/N): ",
    );
    if (overwrite.toLowerCase() !== "y" && overwrite.toLowerCase() !== "yes") {
      console.log(
        "‚ùå Setup cancelled. Your existing .env.local file was preserved.",
      );
      return;
    }
  }

  console.log("\nüìù Let's configure your environment variables...\n");

  // Collect user inputs
  const mongodbUri =
    (await prompt(
      "üîó MongoDB URI (default: mongodb://localhost:27017/golobe_travel_agency): ",
    )) || "mongodb://localhost:27017/golobe_travel_agency";
  const baseUrl =
    (await prompt("üåê Base URL (default: http://localhost:3000): ")) ||
    "http://localhost:3000";
  const stripeSecretKey = await prompt(
    "üí≥ Stripe Secret Key (starts with sk_test_): ",
  );
  const stripePublishableKey = await prompt(
    "üí≥ Stripe Publishable Key (starts with pk_test_): ",
  );
  const stripeWebhookSecret = await prompt(
    "üîó Stripe Webhook Secret (starts with whsec_): ",
  );
  const mailjetApiToken = await prompt("üìß Mailjet API Token: ");
  const mailjetSecretToken = await prompt("üìß Mailjet Secret Token: ");
  const senderEmail = await prompt("üìß Sender Email: ");

  // Generate random secrets
  const authSecret = generateRandomString(32);
  const apiSecretToken = generateRandomString(32);
  const cronSecret = generateRandomString(32);

  // Create environment file content
  const envContent = `# ===========================================
# Golobe Travel Agency - Environment Variables
# ===========================================
# Generated by setup script on ${new Date().toISOString()}

# ===========================================
# DATABASE CONFIGURATION
# ===========================================
MONGODB_URI=${mongodbUri}

# ===========================================
# AUTHENTICATION (NextAuth.js)
# ===========================================
AUTH_SECRET=${authSecret}

# ===========================================
# APPLICATION CONFIGURATION
# ===========================================
NEXT_PUBLIC_BASE_URL=${baseUrl}
NEXT_PUBLIC_REVALIDATION_TIME=600

# ===========================================
# API SECURITY
# ===========================================
API_SECRET_TOKEN=${apiSecretToken}
CRON_SECRET=${cronSecret}

# ===========================================
# STRIPE PAYMENT PROCESSING
# ===========================================
STRIPE_SECRET_KEY=${stripeSecretKey}
NEXT_PUBLIC_STRIPE_PK=${stripePublishableKey}
STRIPE_WEBHOOK_SECRET=${stripeWebhookSecret}

# ===========================================
# EMAIL CONFIGURATION (Mailjet)
# ===========================================
MAIL_API_TOKEN=${mailjetApiToken}
MAIL_SECRET_TOKEN=${mailjetSecretToken}
MAIL_SENDER_EMAIL=${senderEmail}

# ===========================================
# DEVELOPMENT NOTES
# ===========================================
# 1. Make sure all required services are configured
# 2. Test the application with: npm run dev
# 3. Generate sample data using the API endpoints
# 4. Never commit this file to version control
`;

  // Write the file
  try {
    fs.writeFileSync(envPath, envContent);
    console.log("‚úÖ Environment file created successfully!");
    console.log(`üìÅ File location: ${envPath}`);
  } catch (error) {
    console.error("‚ùå Error creating environment file:", error.message);
    return;
  }

  // Display next steps
  console.log("\nüéâ Setup completed successfully!");
  console.log("\nüìã Next steps:");
  console.log("1. Install dependencies: npm install");
  console.log("2. Start the development server: npm run dev");
  console.log("3. Generate sample data using the API endpoints");
  console.log("4. Check the GETTING_STARTED.md file for detailed instructions");

  console.log("\nüîë Generated secrets:");
  console.log(`   AUTH_SECRET: ${authSecret}`);
  console.log(`   API_SECRET_TOKEN: ${apiSecretToken}`);
  console.log(`   CRON_SECRET: ${cronSecret}`);

  console.log("\n‚ö†Ô∏è  Important:");
  console.log("- Keep these secrets secure and never share them");
  console.log(
    "- Update the environment variables with your actual service credentials",
  );
  console.log(
    "- For production, use production keys and rotate secrets regularly",
  );
}

// Function to check prerequisites
function checkPrerequisites() {
  console.log("üîç Checking prerequisites...\n");

  // Check Node.js version
  const nodeVersion = process.version;
  const nodeVersionNum = parseInt(nodeVersion.slice(1).split(".")[0]);

  if (nodeVersionNum < 18) {
    console.log("‚ùå Node.js version 18 or higher is required");
    console.log(`   Current version: ${nodeVersion}`);
    console.log("   Download from: https://nodejs.org/");
    process.exit(1);
  } else {
    console.log(`‚úÖ Node.js version: ${nodeVersion}`);
  }

  // Check npm
  try {
    const npmVersion = require("child_process")
      .execSync("npm --version", { encoding: "utf8" })
      .trim();
    console.log(`‚úÖ npm version: ${npmVersion}`);
  } catch (error) {
    console.log("‚ùå npm is not installed or not accessible");
    process.exit(1);
  }

  // Check if package.json exists
  if (!fs.existsSync("package.json")) {
    console.log(
      "‚ùå package.json not found. Make sure you're in the project root directory.",
    );
    process.exit(1);
  }

  console.log("‚úÖ All prerequisites met!\n");
}

// Main function
async function main() {
  try {
    checkPrerequisites();
    await createEnvFile();
  } catch (error) {
    console.error("‚ùå Setup failed:", error.message);
    process.exit(1);
  }
}

// Run the setup
if (require.main === module) {
  main();
}

module.exports = { createEnvFile, checkPrerequisites };
